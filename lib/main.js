// Generated by CoffeeScript 1.7.1
(function() {
  var ASYNC, T, TEXT, TRM, alert, as_transformer, badge, datasource_infos, debug, echo, help, info, log, new_parser, njs_fs, options, rainbow, rpr, urge, warn, whisper;

  njs_fs = require('fs');

  TEXT = require('coffeenode-text');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'timetable/main';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  echo = TRM.echo.bind(TRM);

  rainbow = TRM.rainbow.bind(TRM);

  ASYNC = require('async');


  /* https://github.com/wdavidw/node-csv-parse */

  new_parser = require('csv-parse');

  T = require('./TRANSFORMERS');

  as_transformer = T.as_transformer.bind(T);

  options = require('../options');

  datasource_infos = require('./datasource-infos');


  /* TAINT very Berlin-specific method, shouldnt appear here */

  this._normalize_name = function(name) {
    name = name.replace(/\s+\(Berlin\)(\s+Bus)?$/, '');
    name = name.replace(/^(U|S\+U)\s+/, '');
    name = name.replace(/^(Alexanderplatz) Bhf\/(.+)$/, '$1 ($2)');
    name = name.replace(/^(Lichtenberg) Bhf\/(.+)$/, '$1 ($2)');
    name = name.replace(/^(Alexanderplatz) Bhf/, '$1');
    name = name.replace(/^(Zoologischer Garten) Bhf/, '$1');
    name = name.replace(/^(Gesundbrunnen) Bhf/, '$1');
    name = name.replace(/^(Potsdamer Platz) Bhf/, '$1');
    name = name.replace(/^(Lichtenberg) Bhf/, '$1');
    name = name.replace(/^(Friedrichstr\.) Bhf/, '$1');
    name = name.replace(/^(Jungfernheide) Bhf/, '$1');
    name = name.replace(/^(Stadtmitte) U[26]/, '$1');
    name = name.replace(/^(.+)str\./, '$1straße');
    name = name.replace(/^(.+)\s+Str\./, '$1 Straße');
    return name;
  };

  this._get_system_name = function(name) {
    name = name.toLowerCase();
    name = name.replace(/,/g, '');
    name = name.replace(/\./g, '');
    name = name.replace(/\s+/g, '-');
    return name;
  };


  /* TAINT unify with following */

  this.$normalize_station_name = function() {
    return as_transformer((function(_this) {
      return function(record) {
        record['name'] = _this._normalize_name(record['name']);
        return record;
      };
    })(this));
  };

  this.$normalize_headsign = function() {
    return as_transformer((function(_this) {
      return function(record) {
        record['headsign'] = _this._normalize_name(record['headsign']);
        return record;
      };
    })(this));
  };

  this.$convert_latlon = function() {
    return as_transformer((function(_this) {
      return function(record) {
        record['lat'] = parseFloat(record['lat']);
        record['lon'] = parseFloat(record['lon']);
        return record;
      };
    })(this));
  };

  this.$fix_ids = function() {
    return as_transformer((function(_this) {
      return function(record) {
        var ignore, match, name, prefix, value;
        for (name in record) {
          value = record[name];
          match = name.match(/^(.+)_id$/);
          if (match == null) {
            continue;
          }
          ignore = match[0], prefix = match[1];
          record[name] = "" + prefix + "-" + value;
        }
        return record;
      };
    })(this));
  };

  this.$clean_agency_record = function() {
    return as_transformer(function(record) {
      delete record['agency_phone'];
      delete record['agency_lang'];
      return record;
    });
  };

  this.$add_agency_id = function() {
    return as_transformer((function(_this) {
      return function(record) {
        record['id'] = record['%gtfs-id'].replace(/[-_]+$/, '');
        return record;
      };
    })(this));
  };

  this.$clean_stoptime_record = function() {
    return as_transformer((function(_this) {
      return function(record) {
        delete record['stop_headsign'];
        delete record['pickup_type'];
        delete record['drop_off_type'];
        delete record['shape_dist_traveled'];
        return record;
      };
    })(this));
  };

  this.$add_stoptime_idx = function() {
    return as_transformer((function(_this) {
      return function(record) {
        record['idx'] = (parseInt(record['stop-sequence'], 10)) - 1;
        delete record['stop-sequence'];
        return record;
      };
    })(this));
  };

  this.$add_stoptime_id = function() {
    return as_transformer((function(_this) {
      return function(record) {
        var gtfs_stop_id, gtfs_trip_id, idx;
        gtfs_stop_id = record['%gtfs-stop-id'];
        gtfs_trip_id = record['%gtfs-trip-id'];
        idx = record['idx'];
        record['id'] = "gtfs-stop:" + gtfs_stop_id + "/gtfs-trip:" + gtfs_trip_id + "/idx:" + idx;
        return record;
      };
    })(this));
  };

  this.$clean_route_record = function() {
    return as_transformer((function(_this) {
      return function(record) {
        delete record['route_long_name'];
        delete record['route_desc'];
        delete record['route_url'];
        delete record['route_color'];
        delete record['route_text_color'];
        return record;
      };
    })(this));
  };

  this.$add_route_id = function(registry) {
    var route_idx;
    route_idx = -1;
    return as_transformer((function(_this) {
      return function(record) {
        var agency, agency_id, gtfs_agency_id, gtfs_id, name;
        route_idx += 1;
        gtfs_agency_id = record['%gtfs-agency-id'];
        gtfs_id = record['%gtfs-id'];
        name = record['name'];
        agency = registry['old'][gtfs_agency_id];
        if (agency == null) {
          return handler(new Error("unable to find agency with GTFS ID " + (rpr(gtfs_agency_id))));
        }
        agency_id = agency['id'];
        record['id'] = "route:" + route_idx + "/" + agency_id + "/name:" + name;
        return record;
      };
    })(this));
  };

  this.$clean_station_record = function() {
    return as_transformer((function(_this) {
      return function(record) {
        delete record['stop_desc'];
        delete record['zone_id'];
        delete record['stop_url'];
        delete record['location_type'];
        delete record['parent_station'];
        return record;
      };
    })(this));
  };

  this.$add_station_system_name = function() {
    return as_transformer((function(_this) {
      return function(record) {
        record['~name'] = _this._get_system_name(record['name']);
        return record;
      };
    })(this));
  };

  this.$add_station_id = function(registry) {
    return as_transformer((function(_this) {
      return function(record) {
        var station_idx, stations, stations_by_names, sys_name;
        stations_by_names = registry['%stations-by-names'] != null ? registry['%stations-by-names'] : registry['%stations-by-names'] = {};
        sys_name = record['~name'];
        stations = stations_by_names[sys_name] != null ? stations_by_names[sys_name] : stations_by_names[sys_name] = [];
        station_idx = stations.length;
        stations.push(record);
        record['id'] = "station/name:" + sys_name + "/idx:" + station_idx;
        return record;
      };
    })(this));
  };

  this.$clean_trip_record = function() {
    return as_transformer((function(_this) {
      return function(record) {
        delete record['trip_short_name'];
        delete record['direction_id'];
        delete record['block_id'];
        delete record['shape_id'];
        return record;
      };
    })(this));
  };

  this.$add_trip_headsign_system_name = function() {
    return as_transformer((function(_this) {
      return function(record) {
        record['~headsign'] = _this._get_system_name(record['headsign']);
        return record;
      };
    })(this));
  };

  this.$add_trip_id = function(registry) {
    return as_transformer((function(_this) {
      return function(record) {
        var gtfs_route_id, gtfs_trip_id;
        gtfs_trip_id = record['%gtfs-id'];
        gtfs_route_id = record['%gtfs-route-id'];

        /* does this make sense?? */
        record['id'] = "gtfs-route-id:" + gtfs_route_id + "/gtfs-trip-id:" + gtfs_trip_id;
        return record;
      };
    })(this));
  };

  this.read_agencies = function(route, registry, handler) {
    var input, parser;
    parser = new_parser(options['parser']);
    input = njs_fs.createReadStream(route);
    input.on('end', function() {
      info('ok: agencies');
      return handler(null);
    });
    input.pipe(parser).pipe(T.$as_pods()).pipe(this.$clean_agency_record()).pipe(this.$fix_ids()).pipe(T.$delete_prefix('agency_')).pipe(T.$add_n4j_system_properties('node', 'agency')).pipe(T.$rename('id', '%gtfs-id')).pipe(this.$add_agency_id()).pipe(T.$dasherize_field_names()).pipe(T.$register(registry));
    whisper('reading GTFS agencies...');
    return null;
  };

  this.read_stoptimes = function(route, registry, handler) {
    var input, parser;
    parser = new_parser(options['parser']);

    /* TAINT must concatenate files or read both parts */
    input = njs_fs.createReadStream(route);
    input.on('end', function() {
      info('ok: stoptimes');
      return handler(null);
    });
    input.pipe(parser).pipe(T.$as_pods()).pipe(this.$clean_stoptime_record()).pipe(this.$fix_ids()).pipe(T.$delete_prefix('trip_')).pipe(T.$add_n4j_system_properties('node', 'stoptime')).pipe(T.$dasherize_field_names()).pipe(T.$rename('id', '%gtfs-trip-id')).pipe(T.$rename('stop-id', '%gtfs-stop-id')).pipe(this.$add_stoptime_idx()).pipe(this.$add_stoptime_id()).pipe(T.$register(registry));
    whisper('reading GTFS stoptimes...');
    return null;
  };


  /* TAINT name clash (filesystem route vs. GTFS route) */

  this.read_routes = function(route, registry, handler) {
    var input, parser;
    parser = new_parser(options['parser']);
    input = njs_fs.createReadStream(route);
    input.on('end', function() {
      info('ok: routes');
      return handler(null);
    });
    input.pipe(parser).pipe(T.$as_pods()).pipe(this.$clean_route_record()).pipe(this.$fix_ids()).pipe(T.$dasherize_field_names()).pipe(T.$rename('route-id', '%gtfs-id')).pipe(T.$rename('agency-id', '%gtfs-agency-id')).pipe(T.$rename('route-short-name', 'name')).pipe(T.$add_n4j_system_properties('node', 'route')).pipe(this.$add_route_id(registry)).pipe(T.$register(registry));
    whisper('reading GTFS routes...');
    return null;
  };

  this.read_stations = function(route, registry, handler) {
    var input, parser;
    parser = new_parser(options['parser']);
    input = njs_fs.createReadStream(route);
    input.on('end', function() {
      info('ok: stations');
      return handler(null);
    });
    input.pipe(parser).pipe(T.$as_pods()).pipe(this.$clean_station_record()).pipe(this.$fix_ids()).pipe(T.$delete_prefix('stop_')).pipe(T.$copy('name', '%gtfs-name')).pipe(this.$normalize_station_name()).pipe(this.$add_station_system_name()).pipe(T.$rename('id', '%gtfs-id')).pipe(T.$add_n4j_system_properties('node', 'station')).pipe(this.$convert_latlon()).pipe(this.$add_station_id(registry)).pipe(T.$register(registry));
    whisper('reading GTFS stations...');
    return null;
  };

  this.read_trips = function(route, registry, handler) {
    var input, parser;
    parser = new_parser(options['parser']);
    input = njs_fs.createReadStream(route);
    input.on('end', function() {
      info('ok: trips');
      return handler(null);
    });
    input.pipe(parser).pipe(T.$as_pods()).pipe(this.$clean_trip_record()).pipe(this.$fix_ids()).pipe(T.$delete_prefix('trip_')).pipe(T.$dasherize_field_names()).pipe(T.$rename('id', '%gtfs-id')).pipe(T.$rename('route-id', '%gtfs-route-id')).pipe(T.$rename('service-id', '%gtfs-service-id')).pipe(T.$copy('headsign', '%gtfs-headsign')).pipe(this.$normalize_headsign()).pipe(this.$add_trip_headsign_system_name()).pipe(T.$add_n4j_system_properties('node', 'trip')).pipe(this.$add_trip_id(registry)).pipe(T.$register(registry));
    whisper('reading GTFS trips...');
    return null;
  };

  this.read = function(handler) {
    var gtfs_type, message, messages, method, no_method, no_source, registry, route, route_by_types, source_name, tasks, _fn, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
    registry = {};
    for (source_name in datasource_infos) {
      route_by_types = datasource_infos[source_name];
      tasks = [];
      no_source = [];
      no_method = [];
      _ref = options['data']['types'];
      _fn = (function(_this) {
        return function(method, route) {
          return tasks.push(function(async_handler) {
            return method(route, registry, async_handler);
          });
        };
      })(this);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        gtfs_type = _ref[_i];
        route = route_by_types[gtfs_type];
        if (route == null) {
          no_source.push("skipping " + source_name + "/" + gtfs_type + " (no source file)");
          continue;
        }
        help("found data source for " + source_name + "/" + gtfs_type);
        switch (gtfs_type) {
          case 'agency':
            method = this.read_agencies;
            break;
          case 'calendar_dates':
            method = this.read_calendar_dates;
            break;
          case 'calendar':
            method = this.read_calendar;
            break;
          case 'routes':
            method = this.read_routes;
            break;
          case 'stop_times':
            method = this.read_stop_times;
            break;
          case 'stops':
            method = this.read_stops;
            break;
          case 'transfers':
            method = this.read_transfers;
            break;
          case 'trips':
            method = this.read_trips;
        }
        if (method == null) {
          no_method.push("no method to read GTFS data of type " + (rpr(gtfs_type)) + "; skipping");
          continue;
        }
        method = method.bind(this);
        _fn(method, route);
      }
      _ref1 = [no_source, no_method];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        messages = _ref1[_j];
        for (_k = 0, _len2 = messages.length; _k < _len2; _k++) {
          message = messages[_k];
          warn(message);
        }
      }
    }
    process.exit();
    tasks = [
      (function(_this) {
        return function(async_handler) {
          return _this.read_agencies(registry, async_handler);
        };
      })(this), (function(_this) {
        return function(async_handler) {
          return _this.read_stoptimes(registry, async_handler);
        };
      })(this), (function(_this) {
        return function(async_handler) {
          return _this.read_routes(registry, async_handler);
        };
      })(this), (function(_this) {
        return function(async_handler) {
          return _this.read_stations(registry, async_handler);
        };
      })(this), (function(_this) {
        return function(async_handler) {
          return _this.read_trips(registry, async_handler);
        };
      })(this)
    ];
    return ASYNC.series(tasks, (function(_this) {
      return function(error) {
        var count, ro;
        if (error != null) {
          throw error;
        }
        ro = registry['old'];
        if (ro != null) {
          count = (Object.keys(ro)).length;
          return debug("" + count + " entries in registry[ 'old' ]");
        } else {
          return debug("no entries in registry[ 'old' ]");
        }
      };
    })(this));
  };

  if (module.parent == null) {
    this.read();
  }

}).call(this);
