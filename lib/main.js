// Generated by CoffeeScript 1.7.1
(function() {
  var ASYNC, GTFS_READER, READER, REGISTRY, TRM, alert, badge, debug, echo, help, info, log, options, rainbow, rpr, urge, warn, whisper;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'TIMETABLE/main';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  echo = TRM.echo.bind(TRM);

  rainbow = TRM.rainbow.bind(TRM);

  ASYNC = require('async');

  GTFS_READER = require('./GTFS-READER');

  READER = require('./READER');

  REGISTRY = require('./REGISTRY');

  options = require('../options');

  this.show_db = function(db, handler) {
    var $, P, count, input;
    P = require('pipedreams');
    $ = P.$.bind(P);
    help('show registry');
    count = 0;
    return input = (db.createReadStream()).pipe($(function(record, handler) {
      count += 1;
      return handler(null, record);
    })).pipe(P.$on_end(function() {
      help(count, "records in DB");
      return handler(null, db);
    }));
  };

  this.main = function(handler) {
    var folder_exists, registry, tasks, _ref;
    tasks = [];
    _ref = REGISTRY._new_registry(), folder_exists = _ref[0], registry = _ref[1];
    if (folder_exists) {
      help("DB already exists");
      help("skipping GTFS_READER.main()");
    } else {
      tasks.push(function(async_handler) {
        return GTFS_READER.main(registry, async_handler);
      });
    }
    tasks.push(function(async_handler) {
      return READER.main(registry, async_handler);
    });
    ASYNC.series(tasks, function(error) {
      if (error != null) {
        return handler(error);
      }
      return registry.close((function(_this) {
        return function() {
          help('registry closed');
          registry = REGISTRY.new_registry();
          return handler(null, registry);
        };
      })(this));
    });
    return null;
  };

  if (module.parent == null) {
    this.main((function(_this) {
      return function(error, registry) {
        var TEXT;
        TEXT = require('coffeenode-text');
        if (error != null) {
          throw error;
        }
        return help('ok');
      };
    })(this));
  }

}).call(this);
