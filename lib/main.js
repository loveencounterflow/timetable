// Generated by CoffeeScript 1.7.1
(function() {
  var GTFS_READER, READER, REGISTRY, TRM, alert, badge, debug, echo, help, info, log, options, rainbow, rpr, urge, warn, whisper;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'TIMETABLE/main';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  echo = TRM.echo.bind(TRM);

  rainbow = TRM.rainbow.bind(TRM);

  GTFS_READER = require('./GTFS-READER');

  READER = require('./READER');

  REGISTRY = require('./REGISTRY');

  options = require('../options');

  this.main = function(handler) {
    var registry;
    registry = REGISTRY.new_registry();
    GTFS_READER.main(registry, (function(_this) {
      return function(error) {
        if (error != null) {
          return handler(error);
        }
        return READER.main(registry, function(error) {
          if (error != null) {
            return handler(error);
          }
          return handler(null, registry);
        });
      };
    })(this));
    return null;
  };

  if (module.parent == null) {
    this.main((function(_this) {
      return function(error, registry) {
        var TEXT, gtfs_type, prefix, type, _i, _j, _len, _len1, _ref, _ref1;
        TEXT = require('coffeenode-text');
        if (error != null) {
          throw error;
        }
        _ref = options['data']['gtfs-types'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          gtfs_type = _ref[_i];
          prefix = 'GTFS ' + (TEXT.flush_left(gtfs_type + ':', 15));
          info(prefix, (Object.keys(registry['%gtfs'][gtfs_type])).length);
        }
        _ref1 = options['data']['node-types'];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          type = _ref1[_j];
          prefix = '     ' + (TEXT.flush_left(type + ':', 15));
          info(prefix, (Object.keys(registry[type])).length);
        }
        return setImmediate(function() {
          return process.exit();
        });
      };
    })(this));
  }

}).call(this);
