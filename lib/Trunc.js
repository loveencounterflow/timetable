// Generated by CoffeeScript 1.7.1

/* adapted from https://raw.githubusercontent.com/isaacs/truncating-stream/master/trunc.js */

(function() {
  var Trunc, debug, stream, util;

  debug = console.error;

  Trunc = function(options) {
    debug("ctor", options);
    stream.Transform.call(this, options);
    this._limit = ~~options.limit || Infinity;
    this._seen = 0;
  };

  module.exports = Trunc;

  stream = require("stream");

  util = require("util");

  util.inherits(Trunc, stream.Transform);

  Trunc.prototype._transform = function(chunk, encoding, cb) {
    var len;
    debug("_tx limit=%d seen=%d", this._limit, this._seen);
    if (this._seen < this._limit) {
      len = Math.min(chunk.length, this._limit - this._seen);
      if (len !== chunk.length) {
        chunk = chunk.slice(0, len);
      }
      this._seen += len;
      debug("_tx pushing %d", len);
      this.push(chunk);
      if (this._seen >= this._limit) {
        this.end();
      }
    }
    cb();
    return 'XXX';
  };

}).call(this);
