// Generated by CoffeeScript 1.7.1
(function() {
  var ProgressBar, TEXT, TRM, TYPES, alert, badge, create_readstream, debug, echo, get_filesize, help, info, log, njs_fs, rainbow, rpr, urge, warn, whisper;

  njs_fs = require('fs');

  TYPES = require('coffeenode-types');

  TEXT = require('coffeenode-text');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'timetable/main';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  echo = TRM.echo.bind(TRM);

  rainbow = TRM.rainbow.bind(TRM);

  ProgressBar = require('progress');

  module.exports = create_readstream = function(route) {
    var CombinedStream, R, bar, format, options, partial_route, routes, size, type, _i, _len;
    switch (type = TYPES.type_of(route)) {
      case 'text':
        R = njs_fs.createReadStream(route);
        break;
      case 'list':
        routes = route;
        CombinedStream = require('combined-stream');
        R = CombinedStream.create();
        for (_i = 0, _len = routes.length; _i < _len; _i++) {
          partial_route = routes[_i];
          R.append(njs_fs.createReadStream(partial_route));
        }
        break;
      default:
        throw new Error("unable to create readstream for argument of type " + (rpr(type)));
    }
    size = get_filesize(route);
    debug(size);
    options = {
      width: 50,
      total: 16434,
      complete: '#',
      incomplete: 'â€”'
    };
    format = '  reading  :percent | :bar | :elapseds :etas';
    bar = new ProgressBar(format, options);
    R.on('data', function(data) {
      bar.tick(data.length);
      if (bar.complete) {
        return info('complete');
      }
    });
    return R;
  };

  get_filesize = function(route) {
    var R, partial_route, _i, _len;
    if ((TYPES.type_of(route)) === 'text') {
      return (njs_fs.statSync(route)).size;
    }
    R = 0;
    for (_i = 0, _len = route.length; _i < _len; _i++) {
      partial_route = route[_i];
      R += get_filesize(partial_route);
    }
    return R;
  };

}).call(this);
