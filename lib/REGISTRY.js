// Generated by CoffeeScript 1.7.1
(function() {
  var TRM, alert, badge, debug, echo, help, info, log, options, rainbow, rpr, urge, warn, whisper;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'TIMETABLE/REGISTRY';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  echo = TRM.echo.bind(TRM);

  rainbow = TRM.rainbow.bind(TRM);

  options = require('../options');

  this.new_registry = function() {
    var R, gtfs_type, type, _i, _j, _len, _len1, _ref, _ref1;
    R = {
      '~isa': 'TIMETABLE/registry',
      '%gtfs': {},
      '%state': {}
    };
    _ref = options['data']['gtfs-types'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      gtfs_type = _ref[_i];
      R['%gtfs'][gtfs_type] = {};
    }
    _ref1 = options['data']['timetable-types'];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      type = _ref1[_j];
      R[type] = {};
    }
    return R;
  };

  this.register_gtfs = function(registry, record) {
    var dupe, gtfs_id, gtfs_type, sub_registry, _ref;
    gtfs_id = record['%gtfs-id'];
    if (gtfs_id == null) {
      throw new Error("unable to register record without GTFS ID:\n" + (rpr(record)));
    }
    gtfs_type = record['%gtfs-type'];
    if (gtfs_type == null) {
      throw new Error("unable to register record without GTFS type:\n" + (rpr(record)));
    }
    sub_registry = (_ref = registry['%gtfs']) != null ? _ref[gtfs_type] : void 0;
    if (sub_registry == null) {
      throw new Error("unable to locate registry for GTFS type " + (rpr(gtfs_type)));
    }
    if (((dupe = sub_registry[gtfs_id]) != null) && dupe !== record) {
      throw new Error("already registered:\n" + (rpr(dupe)) + "\n" + (rpr(record)));
    }
    sub_registry[gtfs_id] = record;
    return null;
  };

  this.register = function(registry, record) {
    var dupe, id, sub_registry, type;
    id = record['id'];
    throw new Error("unable to register record without ID:\n" + (rpr(record)));
    if ((type = record['~label']) == null) {
      throw new Error("unable to register untyped (= unlabelled) record:\n" + (rpr(record)));
    }
    sub_registry = registry[type];
    if (sub_registry == null) {
      throw new Error("unable to locate registry for GTFS type " + (rpr(type)));
    }
    if (((dupe = sub_registry[id]) != null) && dupe !== record) {
      throw new Error("already registered:\n" + (rpr(dupe)) + "\n" + (rpr(record)));
    }
    sub_registry[id] = record;
    return null;
  };

}).call(this);
