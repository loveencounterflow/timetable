// Generated by CoffeeScript 1.7.1
(function() {
  var TEXT, TRM, alert, badge, debug, echo, help, info, log, njs_fs, options, rainbow, rpr, transform_stream, urge, warn, whisper;

  njs_fs = require('fs');

  TEXT = require('coffeenode-text');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'timetable/TRANSFORMERS';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  echo = TRM.echo.bind(TRM);

  rainbow = TRM.rainbow.bind(TRM);

  transform_stream = require('stream-transform');

  options = require('../options');

  this.as_transformer = function(method) {
    return transform_stream(method, options['stream-transform']);
  };

  this.$as_pods = function() {
    var field_names, record_idx;
    record_idx = -1;
    field_names = null;
    return this.as_transformer((function(_this) {
      return function(record, handler) {
        var R, field_idx, field_name, field_value, _i, _len;
        if ((record_idx += 1) === 0) {
          field_names = record;
          return;
        }
        R = {};
        for (field_idx = _i = 0, _len = record.length; _i < _len; field_idx = ++_i) {
          field_value = record[field_idx];
          field_name = field_names[field_idx];
          R[field_name] = field_value;
        }
        return handler(null, R);
      };
    })(this));
  };

  this.$delete_prefix = function(prefix) {
    return this.as_transformer((function(_this) {
      return function(record, handler) {
        var field_value, new_field_name, old_field_name;
        for (old_field_name in record) {
          field_value = record[old_field_name];
          if (!TEXT.starts_with(old_field_name, prefix)) {
            continue;
          }
          new_field_name = old_field_name.replace(prefix, '');
          if (new_field_name.length === 0) {
            continue;
          }

          /* TAINT should throw error */
          if (record[new_field_name] != null) {
            continue;
          }
          record[new_field_name] = field_value;
          delete record[old_field_name];
        }
        return handler(null, record);
      };
    })(this));
  };

  this.$add_n4j_system_properties = function(isa, label) {
    return this.as_transformer((function(_this) {
      return function(record, handler) {
        record['~isa'] = isa;
        record['~label'] = label;
        return handler(null, record);
      };
    })(this));
  };

  this.$dasherize_field_names = function() {
    return this.as_transformer((function(_this) {
      return function(record, handler) {
        var new_field_name, old_field_name;
        for (old_field_name in record) {
          new_field_name = old_field_name.replace(/_/g, '-');
          if (new_field_name === old_field_name) {
            continue;
          }
          _this._rename(record, old_field_name, new_field_name);
        }
        return handler(null, record);
      };
    })(this));
  };

  this._rename = function(record, old_field_name, new_field_name) {
    this._copy(record, old_field_name, new_field_name, 'rename');
    delete record[old_field_name];
    return record;
  };

  this._copy = function(record, old_field_name, new_field_name, action) {
    var error;
    if (record[old_field_name] === void 0) {
      error = new Error("when trying to " + action + " field " + (rpr(old_field_name)) + " to " + (rpr(new_field_name)) + "\nfound that there is no field " + (rpr(old_field_name)) + " in\n" + (rpr(record)));
      error['code'] = 'no such field';
      throw error;
    }
    if (record[new_field_name] !== void 0) {
      throw new Error("when trying to " + action + " field " + (rpr(old_field_name)) + " to " + (rpr(new_field_name)) + "\nfound that field " + (rpr(new_field_name)) + " already present in\n" + (rpr(record)));
      error['code'] = 'duplicate field';
      throw error;
    }
    record[new_field_name] = record[old_field_name];
    return record;
  };

  this.$rename = function(old_field_name, new_field_name) {
    return this.as_transformer((function(_this) {
      return function(record, handler) {
        return handler(null, _this._rename(record, old_field_name, new_field_name));
      };
    })(this));
  };

  this.$copy = function(old_field_name, new_field_name) {
    return this.as_transformer((function(_this) {
      return function(record, handler) {
        return handler(null, _this._copy(record, old_field_name, new_field_name, 'copy'));
      };
    })(this));
  };

  this.$show_sample = function(input_stream) {

    /* TAINT may introduce a memory leak. */
    var records;
    records = [];
    input_stream.once('end', (function(_this) {
      return function() {
        return info(rpr(records[Math.floor(Math.random() * records.length)]));
      };
    })(this));
    return this.as_transformer((function(_this) {
      return function(record, handler) {
        records.push(record);
        return handler(null, record);
      };
    })(this));
  };

  this.$skip = function(limit) {
    var count;
    if (limit == null) {
      limit = 1;
    }
    count = 0;
    return this.as_transformer((function(_this) {
      return function(record, handler) {
        count += 1;
        if (count > limit) {
          return handler(null, null);
        }
        return handler(null, record);
      };
    })(this));
  };

  this.$show = function() {
    return this.as_transformer((function(_this) {
      return function(record, handler) {
        info(rpr(record));
        return handler(null, record);
      };
    })(this));
  };

  this.$show_and_quit = function() {
    return this.as_transformer((function(_this) {
      return function(record, handler) {
        info(rpr(record));
        warn('aborting from `TRANSFORMERS.show_and_quit`');
        setImmediate(function() {
          return process.exit();
        });
        return handler(null, record);
      };
    })(this));
  };

}).call(this);
