// Generated by CoffeeScript 1.7.1
(function() {
  var $, DEV, P, REGISTRY, TRM, alert, badge, debug, echo, help, info, log, options, rainbow, rpr, urge, warn, whisper;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'TIMETABLE/timetable-from-gtfs-data';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  echo = TRM.echo.bind(TRM);

  rainbow = TRM.rainbow.bind(TRM);

  REGISTRY = require('./REGISTRY');

  P = require('pipedreams');

  $ = P.$.bind(P);

  options = require('../options');

  DEV = options['mode'] === 'dev';

  this.$register = function(registry) {
    return $((function(_this) {
      return function(node, handler) {
        REGISTRY.register(registry, node);
        return handler(null, node);
      };
    })(this));
  };


  /* TAINT very Berlin-specific method, shouldnt appear here */

  this.normalize_name = function(name) {
    name = name.replace(/\s+\(Berlin\)(\s+Bus)?$/, '');
    if (!/^(U|S) Olympiastadion/.test(name)) {
      name = name.replace(/^(U|S\+U|S)\s+/, '');
    }
    name = name.replace(/^(Alexanderplatz) Bhf\/(.+)$/, '$1 ($2)');
    name = name.replace(/^(Lichtenberg) Bhf\/(.+)$/, '$1 ($2)');
    name = name.replace(/^(Alexanderplatz) Bhf/, '$1');
    name = name.replace(/^(Zoologischer Garten) Bhf/, '$1');
    name = name.replace(/^(Gesundbrunnen) Bhf/, '$1');
    name = name.replace(/^(Potsdamer Platz) Bhf/, '$1');
    name = name.replace(/^(Lichtenberg) Bhf/, '$1');
    name = name.replace(/^(Friedrichstr\.) Bhf/, '$1');
    name = name.replace(/^(Jungfernheide) Bhf/, '$1');
    name = name.replace(/^(Stadtmitte) U[26]/, '$1');
    name = name.replace(/str\./g, 'straße');
    name = name.replace(/\s+Str\./g, ' Straße');
    return name;
  };

  this.$normalize_name = function(key) {
    return $((function(_this) {
      return function(node, handler) {
        var name;
        name = node[key];
        if (name == null) {
          return handler(new Error("unable to find key " + (rpr(key)) + " in\n" + (rpr(node))));
        }
        node[key] = _this.normalize_name(name);
        return handler(null, node);
      };
    })(this));
  };

  this.$add_n4j_system_properties = function(label) {
    return $(function(node, handler) {
      node['~isa'] = 'node';
      node['~label'] = label;
      return handler(null, node);
    });
  };

  this.$remove_gtfs_fields = function() {
    return $(function(node, handler) {
      var name;
      for (name in node) {
        if (/^%gtfs/.test(name)) {
          delete node[name];
        }
      }
      return handler(null, node);
    });
  };

  this.$add_id = function() {
    var idx;
    idx = 0;
    return $(function(node, handler) {
      var id, label;
      id = node['id'];
      label = node['~label'];
      if (id != null) {
        return handler(new Error("ID already set: " + (rpr(node))));
      }
      if (label == null) {
        return handler(new Error("unable to set ID on node without label: " + (rpr(node))));
      }
      node['id'] = "" + label + "-" + idx;
      idx += 1;
      return handler(null, node);
    });
  };

  this.timetable_from_gtfs_data = function(gtfs_registry, handler) {};

  this.main = function(registry, handler) {
    var input;
    input = P.read_values(registry['%gtfs']['stops']);
    return input.pipe(this.$normalize_name('name')).pipe(this.$add_n4j_system_properties('station')).pipe(this.$add_id()).pipe(this.$remove_gtfs_fields()).pipe(this.$register(registry)).pipe(P.$collect_sample(input, 1, function(_, sample) {
      return whisper('stop', sample);
    })).on('end', (function(_this) {
      return function() {
        info('ok: routes');
        return handler(null);
      };
    })(this));
  };

}).call(this);
