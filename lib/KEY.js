// Generated by CoffeeScript 1.7.1
(function() {
  "\n\n\n\ng/sttm^828812\ng/trip^32565\ng/route^811\n\n\n%|g/route|name:foobar|^811\n\n\n%|gtfs/stoptime|gtfs/trip^123|^556|gtfs/service^33421\n\n  %|gtfs/stoptime|gtfs/trip^123|^556\n+ %|gtfs/trip|gtfs/route^8877|^123\n------------------------------------------------------\n= %|gtfs/stoptime|gtfs/route^8877\n\n\n= %|gtfs/stoptime|gtfs/trip^123|^556|gtfs/route^8877\n\n\n############################################################################################################\n\ngtfs:\n  stoptime:\n    id:           gtfs/stoptime/876\n    stop-id:      gtfs/stop/123\n    trip-id:      gtfs/trip/456\n    ...\n\n  stop:\n    id:           gtfs/stop/123\n    name:         Bayerischer+Platz\n    ...\n\n  trip:\n    id:           gtfs/trip/456\n    route-id:     gtfs/route/777\n    service-id:   gtfs/service/888\n\n\ngtfs/stoptime/876\ngtfs/stoptime/876/stop-id:gtfs/stop/123\ngtfs/stoptime/876/trip-id:gtfs/trip/456\ngtfs/stop/123\ngtfs/stop/123/name:Bayerischer+Platz\ngtfs/trip/456\n\n\n############################################################################################################\n\ngtfs:\n  stoptime:\n    id:              gtfs/stoptime/876\n    gtfs/stop/:      gtfs/stop/123\n    gtfs/trip/:      gtfs/trip/456\n    ...\n    arr:              15:38\n    dep:              15:38\n\n\n  stop:\n    id:              gtfs/stop/123\n    name:             Bayerischer+Platz\n    ...\n\n  trip:\n    id:              gtfs/trip/456\n    gtfs/route/:     gtfs/route/777\n    gtfs/service/:   gtfs/service/888\n\n  route:\n    id:              gtfs/route/777\n    name:             U4\n\n$ . | realm / type / idn\n$ : | realm / type / idn | name | value\n$ ^ | realm₀ / type₀ / idn₀|>realm₁ / type₁ / idn₁\n\n$.|gtfs/route/777\n$.|gtfs/stop/123\n$.|gtfs/stoptime/876\n$.|gtfs/trip/456\n\n$:|gtfs/route/777|name|U4\n$:|gtfs/stop/123|name|Bayerischer+Platz\n$:|gtfs/stoptime/876|arr|15%2538\n$:|gtfs/stoptime/876|dep|15%2538\n\n$^|gtfs/stoptime/876|gtfs/stop/123\n$^|gtfs/stoptime/876|gtfs/trip/456\n$^|gtfs/trip/456|gtfs/route/777\n$^|gtfs/trip/456|gtfs/service/888\n\n\n  gtfs/stoptime/876|-1>gtfs/trip/456\n+                       gtfs/trip/456|-1>gtfs/route/777\n----------------------------------------------------------------\n= gtfs/stoptime/876|-2>gtfs/route/777\n+                       gtfs/route/777|name:U4\n----------------------------------------------------------------\n= gtfs/stoptime/876|=gtfs/route/name:U4\n\n# or\n\n= gtfs/stoptime/876|=gtfs/route|name:U4\n\n# or\n\n= gtfs/stoptime/876|=2>gtfs/route|name:U4|777\n\n\n\n  gtfs/stoptime/876|-1>gtfs/trip/456\n                        gtfs/trip/456|-1>gtfs/service/888\n----------------------------------------------------------------\n= gtfs/stoptime/876|-2>gtfs/service/888\n\n============================================================================================================\n\n% : | realm / type   | name | value | idn\n% ^ | realm₀ / type₀ | n | realm₁ / type₁ / idn₁ | idn₀\n\n%:|gtfs/route|name|U4|777\n%:|gtfs/stoptime|arr|15%2538|876\n%:|gtfs/stoptime|dep|15%2538|876\n%:|gtfs/stop|name|Bayerischer+Platz|123\n%^|gtfs/stoptime|1|gtfs/stop/123|876\n%^|gtfs/stoptime|1|gtfs/trip/456|876\n%^|gtfs/stoptime|2|gtfs/route/777|876\n%^|gtfs/stoptime|2|gtfs/service/888|876\n%^|gtfs/trip|gtfs/route/777|456\n%^|gtfs/trip|gtfs/service/888|456\n\n\nrealm\ntype\nname\nvalue\nidn\n\njoiner      |\n%\nescape_chr\n=\n>\n:\n^\n\n";
  var TEXT, TRM, TYPES, alert, badge, debug, echo, help, info, log, njs_fs, options, rainbow, rpr, urge, warn, whisper,
    __slice = [].slice;

  njs_fs = require('fs');

  TYPES = require('coffeenode-types');

  TEXT = require('coffeenode-text');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'TIMETABLE/GTFS-READER';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  echo = TRM.echo.bind(TRM);

  rainbow = TRM.rainbow.bind(TRM);

  options = (require('../../options'))['keys'];

  this.new_route = function(realm, type) {
    var router;
    router = options['router'];
    return (this.esc(realm)) + router + (this.esc(type));
  };

  this.new_id = function(realm, type, idn) {
    var router;
    router = options['router'];
    return (this.new_route(realm, type)) + router + (this.esc(idn));
  };

  this.new_node = function(realm, type, idn) {
    var joiner;
    joiner = options['joiner'];
    return options['primary'] + options['node'] + joiner + (this.new_id(realm, type, idn));
  };

  this.new_facet_pair = function(realm, type, idn, name, value) {
    return [this.new_facet(realm, type, idn, name, value), this.new_secondary_facet(realm, type, idn, name, value)];
  };

  this.new_facet = function(realm, type, idn, name, value) {
    var joiner;
    joiner = options['joiner'];
    return options['primary'] + options['facet'] + joiner + (this.new_id(realm, type, idn)) + joiner + (this.esc(name)) + joiner + (this.esc(value));
  };

  this.new_secondary_facet = function(realm, type, idn, name, value) {
    var joiner;
    joiner = options['joiner'];
    return options['secondary'] + options['facet'] + joiner + (this.new_route(realm, type)) + joiner + (this.esc(name)) + joiner + (this.esc(value)) + joiner + (this.esc(idn));
  };

  this.new_link_pair = function(realm_0, type_0, idn_0, realm_1, type_1, idn_1) {
    return [this.new_link(realm_0, type_0, idn_0, realm_1, type_1, idn_1), this.new_secondary_link(realm_0, type_0, idn_0, realm_1, type_1, idn_1)];
  };

  this.new_link = function(realm_0, type_0, idn_0, realm_1, type_1, idn_1) {
    var joiner;
    joiner = options['joiner'];
    return options['primary'] + options['link'] + joiner + (this.new_id(realm_0, type_0, idn_0)) + joiner + (this.new_id(realm_1, type_1, idn_1));
  };

  this.new_secondary_link = function(realm_0, type_0, idn_0, realm_1, type_1, idn_1, distance) {
    var joiner;
    if (distance == null) {
      distance = 1;
    }
    joiner = options['joiner'];
    return options['secondary'] + options['link'] + joiner + (this.new_route(realm_0, type_0)) + joiner + distance + joiner + (this.new_id(realm_1, type_1, idn_1)) + joiner + (this.esc(idn_0));
  };

  this.read = function(key) {
    var fields, layer, type, _ref, _ref1;
    _ref = key.split(options['joiner']), (_ref1 = _ref[0], layer = _ref1[0], type = _ref1[1]), fields = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
    switch (layer) {
      case options['primary']:
        switch (type) {
          case options['node']:
            return this._read_primary_node.apply(this, fields);
          case options['facet']:
            return this._read_primary_facet.apply(this, fields);
          case options['link']:
            return this._read_primary_link.apply(this, fields);
          default:
            throw new Error("unknown type mark " + (rpr(type)));
        }
        break;
      case options['secondary']:
        switch (type) {
          case options['facet']:
            return this._read_secondary_facet.apply(this, fields);
          case options['link']:
            return this._read_secondary_link.apply(this, fields);
          default:
            throw new Error("unknown type mark " + (rpr(type)));
        }
        break;
      default:
        throw new Error("unknown layer mark " + (rpr(layer)));
    }
  };

  this._read_primary_node = function(id) {
    return {
      level: 'primary',
      type: 'node',
      id: id
    };
  };

  this._read_primary_facet = function(id, name, value) {
    return {
      level: 'primary',
      type: 'facet',
      id: id,
      name: name,
      value: value
    };
  };

  this._read_primary_link = function(id_0, id_1) {
    return {
      level: 'primary',
      type: 'link',
      id: id_0,
      target: id_1,
      distance: 1
    };
  };

  this._read_secondary_facet = function(route, name, value, idn) {
    return {
      level: 'secondary',
      type: 'facet',
      id: route + options['router'] + idn,
      name: name,
      value: value
    };
  };

  this._read_secondary_link = function(route_0, distance, id_1, idn_0) {
    var id_0;
    id_0 = route_0 + options['router'] + idn_0;
    return {
      level: 'primary',
      type: 'link',
      id: id_0,
      target: id_1,
      distance: parseInt(distance, 10)
    };
  };

  this.esc = function(text) {
    var R;
    R = text;
    R = R.replace(/%/g, '%25');
    R = R.replace(/\|/g, '%7C');
    R = R.replace(/\//g, '%2F');
    return R;
  };

  if (module.parent == null) {
    help(this.new_id('gtfs', 'stop', '123'));
    help(this.new_node('gtfs', 'stop', '123'));
    help(this.new_facet('gtfs', 'stop', '123', 'name', 'Bayerischer Platz'));
    help(this.new_secondary_facet('gtfs', 'stop', '123', 'name', 'Bayerischer Platz'));
    help(this.new_facet_pair('gtfs', 'stop', '123', 'name', 'Bayerischer Platz'));
    help(this.new_link('gtfs', 'stoptime', '456', 'gtfs', 'stop', '123'));
    help(this.new_secondary_link('gtfs', 'stoptime', '456', 'gtfs', 'stop', '123'));
    help(this.new_link_pair('gtfs', 'stoptime', '456', 'gtfs', 'stop', '123'));
    help(this.read(this.new_node('gtfs', 'stop', '123')));
    help(this.read(this.new_facet('gtfs', 'stop', '123', 'name', 'Bayerischer Platz')));
    help(this.read(this.new_secondary_facet('gtfs', 'stop', '123', 'name', 'Bayerischer Platz')));
    help(this.read(this.new_link('gtfs', 'stoptime', '456', 'gtfs', 'stop', '123')));
    help(this.read(this.new_secondary_link('gtfs', 'stoptime', '456', 'gtfs', 'stop', '123')));
  }

}).call(this);
