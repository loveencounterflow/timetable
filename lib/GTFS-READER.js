// Generated by CoffeeScript 1.7.1
(function() {
  var $, ASYNC, P, REGISTRY, TEXT, TRM, TYPES, alert, badge, datasource_infos, debug, echo, global_data_limit, help, info, log, njs_fs, options, rainbow, rpr, urge, warn, whisper, _ref, _ref1;

  njs_fs = require('fs');

  TYPES = require('coffeenode-types');

  TEXT = require('coffeenode-text');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'TIMETABLE/read-gtfs-data';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  echo = TRM.echo.bind(TRM);

  rainbow = TRM.rainbow.bind(TRM);

  options = require('../options');

  global_data_limit = (_ref = (_ref1 = options['data']) != null ? _ref1['limit'] : void 0) != null ? _ref : Infinity;

  datasource_infos = (require('./get-datasource-infos'))();

  REGISTRY = require('./REGISTRY');

  ASYNC = require('async');


  /* https://github.com/loveencounterflow/pipedreams */

  P = require('pipedreams');

  $ = P.$.bind(P);

  this.$register = function(registry) {
    return $((function(_this) {
      return function(record, handler) {
        REGISTRY.register_gtfs(registry, record);
        return handler(null, record);
      };
    })(this));
  };

  this.$convert_latlon = function() {
    return $((function(_this) {
      return function(record, handler) {
        record['lat'] = parseFloat(record['lat']);
        record['lon'] = parseFloat(record['lon']);
        return handler(null, record);
      };
    })(this));
  };

  this.read_agency = function(registry, route, handler) {
    var input;
    input = P.create_readstream(route, 'agency');
    input.on('end', function() {
      info('ok: agency');
      return handler(null);
    });
    input.pipe(P.$split()).pipe(P.$skip_empty()).pipe(P.$collect_sample(input, 4, function(_, collector) {
      return debug(collector);
    })).pipe(P.$sample(1 / 10, {
      headers: true,
      seed: 5
    })).pipe(P.$parse_csv()).pipe(this.$clean_agency_record()).pipe(P.$delete_prefix('agency_')).pipe(P.$set('%gtfs-type', 'agency')).pipe(P.$rename('id', '%gtfs-id')).pipe(P.$dasherize_field_names()).pipe(this.$register(registry)).pipe(P.$show_table(input));
    whisper('reading GTFS agency...');
    return null;
  };

  this.$clean_agency_record = function() {
    return $((function(_this) {
      return function(record, handler) {
        delete record['agency_phone'];
        delete record['agency_lang'];
        return handler(null, record);
      };
    })(this));
  };


  /* TAINT name clash (filesystem route vs. GTFS route) */

  this.read_routes = function(registry, route, handler) {
    var input;
    input = P.create_readstream(route, 'routes');
    input.on('end', function() {
      info('ok: routes');
      return handler(null);
    });
    input.pipe(parser).pipe(P.$skip(global_data_limit)).pipe(P.$as_pods()).pipe(this.$clean_routes_record()).pipe(P.$dasherize_field_names()).pipe(P.$set('%gtfs-type', 'routes')).pipe(P.$rename('route-id', '%gtfs-id')).pipe(P.$rename('agency-id', '%gtfs-agency-id')).pipe(P.$rename('route-short-name', 'name')).pipe(this.$register(registry)).pipe(P.$count(input, 'routes'));
    whisper('reading GTFS routes...');
    return null;
  };

  this.$clean_routes_record = function() {
    return $((function(_this) {
      return function(record, handler) {
        delete record['route_long_name'];
        delete record['route_desc'];
        delete record['route_url'];
        delete record['route_color'];
        delete record['route_text_color'];
        return handler(null, record);
      };
    })(this));
  };

  this.read_stops = function(registry, route, handler) {
    var input;
    input = P.create_readstream(route, 'stops');
    input.on('end', function() {
      info('ok: stops');
      return handler(null);
    });
    input.pipe(parser).pipe(P.$skip(global_data_limit)).pipe(P.$as_pods()).pipe(this.$clean_stops_record()).pipe(P.$delete_prefix('stop_')).pipe(P.$set('%gtfs-type', 'stops')).pipe(P.$rename('id', '%gtfs-id')).pipe(this.$convert_latlon()).pipe(this.$register(registry)).pipe(P.$count(input, 'stops'));
    whisper('reading GTFS stops...');
    return null;
  };

  this.$clean_stops_record = function() {
    return $((function(_this) {
      return function(record, handler) {
        delete record['stop_desc'];
        delete record['zone_id'];
        delete record['stop_url'];
        delete record['location_type'];
        delete record['parent_station'];
        return handler(null, record);
      };
    })(this));
  };

  this.read_trips = function(registry, route, handler) {
    var input;
    input = P.create_readstream(route, 'trips');
    input.on('end', function() {
      info('ok: trips');
      return handler(null);
    });
    input.setMaxListeners(100);
    input.pipe(P.$split()).pipe(P.$skip_empty()).pipe(P.$parse_csv()).pipe(P.$count(input, 'trips A')).pipe(this.$clean_trip_record()).pipe(P.$delete_prefix('trip_')).pipe(P.$dasherize_field_names()).pipe(P.$set('%gtfs-type', 'trips')).pipe(P.$rename('id', '%gtfs-id')).pipe(P.$rename('route-id', '%gtfs-routes-id')).pipe(P.$rename('service-id', '%gtfs-service-id')).pipe(this.$register(registry)).pipe(P.$show_sample(input));
    return null;
  };

  this.$clean_trip_record = function() {
    return $((function(_this) {
      return function(record, handler) {
        delete record['trip_short_name'];
        delete record['direction_id'];
        delete record['block_id'];
        delete record['shape_id'];
        return handler(null, record);
      };
    })(this));
  };

  this.read_stop_times = function(registry, route, handler) {
    var input;
    input = P.create_readstream(route, 'stop_times');
    input.on('end', function() {
      info('ok: stoptimes');
      return handler(null);
    });
    input.pipe(P.$split()).pipe(P.$sample(1 / 1e4)).pipe(P.$skip_empty()).pipe(P.$parse_csv()).pipe(P.$show_sample(input)).pipe(P.$count(input, 'stop_times A')).pipe(P.$count(input, 'stop_times B')).pipe(this.$clean_stoptime_record()).pipe(P.$count(input, 'stop_times C')).pipe(P.$set('%gtfs-type', 'stop_times')).pipe(P.$count(input, 'stop_times D')).pipe(this.$add_stoptimes_gtfsid()).pipe(this.$register(registry)).pipe(P.$count(input, 'stop_times E'));
    whisper('reading GTFS stoptimes...');
    return null;
  };

  this.$clean_stoptime_record = function() {
    return $((function(_this) {
      return function(record, handler) {
        delete record['stop_headsign'];
        delete record['pickup_type'];
        delete record['drop_off_type'];
        delete record['shape_dist_traveled'];
        return handler(null, record);
      };
    })(this));
  };

  this.$add_stoptimes_gtfsid = function() {
    var idx;
    idx = 0;
    return $((function(_this) {
      return function(record, handler) {
        record['%gtfs-id'] = "" + idx;
        idx += 1;
        return handler(null, record);
      };
    })(this));
  };

  this.main = function(registry, handler) {
    var gtfs_type, limit, message, messages, method, method_name, no_method, no_source, ok_types, route, route_by_types, source_name, tasks, _fn, _i, _j, _k, _len, _len1, _len2, _ref2, _ref3, _ref4, _ref5;
    for (source_name in datasource_infos) {
      route_by_types = datasource_infos[source_name];
      tasks = [];
      no_source = [];
      no_method = [];
      ok_types = [];
      _ref2 = options['data']['gtfs-types'];
      _fn = (function(_this) {
        return function(method, route) {
          return tasks.push(function(async_handler) {
            return method(registry, route, async_handler);
          });
        };
      })(this);
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        gtfs_type = _ref2[_i];
        if (gtfs_type !== 'agency') {
          warn("skipping != agency");
          continue;
        }
        route = route_by_types[gtfs_type];
        if (route == null) {
          no_source.push("skipping " + source_name + "/" + gtfs_type + " (no source file)");
          continue;
        }
        help("found data source for " + source_name + "/" + gtfs_type);
        method_name = "read_" + gtfs_type;
        method = this[method_name];
        if (method == null) {
          no_method.push("no method to read GTFS data of type " + (rpr(gtfs_type)) + "; skipping");
          continue;
        }
        method = method.bind(this);
        ok_types.push(gtfs_type);
        _fn(method, route);
      }
      _ref3 = [no_source, no_method];
      for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
        messages = _ref3[_j];
        for (_k = 0, _len2 = messages.length; _k < _len2; _k++) {
          message = messages[_k];
          warn(message);
        }
      }
      info("reading data for " + ok_types.length + " type(s)");
      info("  (" + (ok_types.join(', ')) + ")");
    }
    limit = (_ref4 = (_ref5 = options['stream-transform']) != null ? _ref5['parallel'] : void 0) != null ? _ref4 : 1;
    ASYNC.series(tasks, (function(_this) {
      return function(error) {
        if (error != null) {
          throw error;
        }
        return handler(null, registry);
      };
    })(this));
    return null;
  };

  if (module.parent == null) {
    this.main(function(error, registry) {
      if (error != null) {
        throw error;
      }
      return info(registry);
    });
  }

}).call(this);
