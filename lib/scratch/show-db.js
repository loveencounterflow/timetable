// Generated by CoffeeScript 1.7.1
(function() {
  var GTFS_READER, READER, REGISTRY, TRM, alert, badge, debug, echo, help, info, log, options, rainbow, rpr, urge, warn, whisper;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'TIMETABLE/main';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  echo = TRM.echo.bind(TRM);

  rainbow = TRM.rainbow.bind(TRM);

  GTFS_READER = require('../GTFS-READER');

  READER = require('../READER');

  REGISTRY = require('../REGISTRY');

  options = require('../../options');

  this.show_db = function(db, handler) {
    var $, P, count, input, query, seen;
    P = require('pipedreams');
    $ = P.$.bind(P);
    help('show registry');
    seen = {};
    count = 0;
    query = {
      'gte': '%|gtfs',
      'lte': '%|gtfs\xff',
      'keys': true,
      'values': false
    };
    return input = (db.createReadStream(query)).pipe($(function(record, handler) {
      count += 1;
      return handler(null, record);
    })).pipe($(function(record, handler) {
      var gtfs_id, gtfs_ref_id, gtfs_ref_type, gtfs_type, key, _, _ref;
      _ref = record.split('|'), _ = _ref[0], gtfs_type = _ref[1], gtfs_ref_type = _ref[2], gtfs_ref_id = _ref[3], gtfs_id = _ref[4];
      key = gtfs_type + '|' + gtfs_ref_type;
      if (seen[key] != null) {
        return handler();
      }
      seen[key] = 1;
      return handler(null, record);
    })).pipe(P.$show()).pipe(P.$on_end(function() {
      help(query);
      help(count, "records in DB");
      return handler(null, db);
    }));
  };

  this.main = function(handler) {
    var registry;
    registry = REGISTRY.new_registry();
    this.show_db(registry, handler);
    return null;
  };

  if (module.parent == null) {
    this.main((function(_this) {
      return function(error, registry) {
        if (error != null) {
          throw error;
        }
        return help('ok');
      };
    })(this));
  }

}).call(this);
